#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app')
const debug = require('debug')('seccamp2018-moba:server')
const http = require('http')
const buildWebSocketServer = require('../websocket')
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

const verifyClient  = (_info) => {
  return true
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}

buildWebSocketServer(server)

// const

// const WebSocket = require('ws')
// const wss = new WebSocket.Server({ server, path: '/ws' })
//
// let connections = [];
// wss.on('connection', (ws) => {
//     console.log('ws/connection')
//     connections.push(ws)
//
//     ws.on('message', (raw_message) => {
//         console.log('recieved:', raw_message)
//         let message
//         try {
//             message = JSON.parse(raw_message)
//         } catch (e) {
//             console.error(e)
//             return
//         }
//         switch(message.ch) {
//             case 'test':
//                 console.log('ch/test:', message.data)
//                 break
//             // case 'request_all_maps': {
//             //     console.log('ch/request_all_map:', message.data)
//             //     const response = JSON.stringify({ch: 'all_maps', data: Maps})
//             //     ws.send(response)
//             //     break
//             // }
//             default:
//                 console.log('undefined ch')
//         }
//     })
//
//     ws.on('close', () => {
//         connections = connections.filter((conn) => conn !== ws)
//     })
// })

